// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // CPU
    Mux16(a=w3 ,b=instruction ,sel=wd3 ,out=w0 );
    ARegister(in=w0 ,load=wd1 ,out=w1 ,out[0..14]=addressM);
    Mux16(a=w1 ,b=inM ,sel=instruction[12] ,out=w2 );
    ALU(x=w4 ,y=w2 ,
        zx=instruction[11] ,nx=instruction[10] ,
        zy=instruction[9] ,ny=instruction[8] ,
        f=instruction[7] ,no=instruction[6] ,
        out=w3 ,out=outM ,zr=zr ,ng=ng );
    And(a=instruction[4] ,b=instruction[15] ,out=w5);
    DRegister(in=w3 ,load=w5 ,out=w4 );
    PC(in=w1 ,load=jmp ,inc=true ,reset=reset ,out[0..14]=pc );
    And(a=instruction[3] ,b=instruction[15] ,out=writeM );


    // Control Destination
    Mux(a=true ,b=wd0 ,sel=instruction[15] ,out=wd1 );
    Mux(a=false ,b=true ,sel=instruction[5] ,out=wd0 );
    Mux(a=true ,b=wd2 ,sel=instruction[15] ,out=wd3 );
    Mux(a=true ,b=false ,sel=instruction[5] ,out=wd2 );

    // Control Jump(fetch)
    Not(in=zr ,out=nzr );
    Not(in=ng ,out=nng );
    And(a=nzr ,b=nng ,out=pos );
    And(a=pos ,b=instruction[0] ,out=wj0 );
    And(a=ng ,b=instruction[2] ,out=wj1 );
    And(a=zr ,b=instruction[1] ,out=wj2 );
    Or(a=wj0 ,b=wj1 ,out=wj3 );
    Or(a=wj3 ,b=wj2 ,out=wj4 );
    And(a=wj4 ,b=instruction[15] ,out=jmp);
}